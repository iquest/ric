<%= rug_menu_for(@event, options.merge(path_base: "events")) do |m| %>
	<%= m.item t("headers.ric_calendar.calendars.index"), ric_calendar.calendars_path, icon: "calendar", active: (controller_name == "calendars" && action_name == "index") %>
	<%= m.new_item if can_read_and_write? %>
	<% if !@event.nil? && !@event.new_record? %>
		<% if @event.scheduled_date_from.blank? %>
			<%= m.show_item %>
			<%= m.edit_item if can_read_and_write? %>
			<%= m.destroy_item if can_read_and_write? %>
		<% else %>
			<%= m.show_item nil, lambda { |event| ric_calendar.event_path(event, scheduled_date_from: @event.scheduled_date_from) } %>
			<%= m.edit_item nil, lambda { |event| ric_calendar.edit_event_path(event, scheduled_date_from: @event.scheduled_date_from) } if can_read_and_write? %>
			<% if @event.is_recurring? %>
				<%= m.item t("headers.ric_calendar.events.destroy"), "#", class: "destroy-recurring-event-link", icon: "trash" if can_read_and_write? %>
			<% else %>
				<%= m.destroy_item if can_read_and_write? %>
			<% end %>
		<% end %>
	<% end %>
<% end %>

<% if @event.is_recurring? %>
	<script type="text/javascript">
		$(document).ready(function() {
			$("a.destroy-recurring-event-link").click(function(e) {
				e.preventDefault();
				var $link = $(this);
				if (!alertify.deleteRecurringEvent) {
					alertify.dialog('deleteRecurringEvent', function factory() {
						return {
							prepare: function() {
								this.setHeader('<%= t("headers.ric_calendar.events.destroy") %>');
								this.setContent('<%= t("general.destroy_this_or_all_occurences") %>');
							},
							setup: function() {
								return { 
									buttons:[
										{ text: '<%= t("general.action.destroy_this_occurence").mb_upcase_first %>', className: 'btn btn-danger' },
										{ text: '<%= t("general.action.destroy_all_occurences").mb_upcase_first %>', className: 'btn btn-danger' },
										{ text: '<%= t("general.action.cancel").mb_upcase_first %>', key: 27/*Esc*/, invokeOnClose: true, className: 'btn' },
									],
									focus: { element: 0 },
									options: {
										maximizable: false,
									}
								};
							},
							callback: function(closeEvent) {
								console.log(closeEvent);
								if (closeEvent.index == 0) {
									$link.attr('data-method', 'delete');
									$link.attr('href', '<%= ric_calendar.event_path(@event, scheduled_date_from: @event.scheduled_date_from) %>')
									$.rails.handleMethod($link);
								
								} else if (closeEvent.index == 1) {
									$link.attr('data-method', 'delete');
									$link.attr('href', '<%= ric_calendar.event_path @event %>')
									$.rails.handleMethod($link);
								
								} else {
									// Nothing to do ...
								}
							}
						};
					}, true, 'confirm');
				}
				alertify.deleteRecurringEvent(null);
			})
		});
	</script>
<% end %>